###############################
###############################
###                         ###
###    PRE-RENDER CHECKS    ###
###                         ###
###############################
###############################

"""

This Pre-Render Checks tool is designed to be run from the Maya shelf, when a user is ready to render.
Its aim is to perform a series of checks before the scene is submitted, to ensure that common errors or
mistakes are not made, which could waste time and resources on the farm.

To use: Run the script from the button on the Maya shelf, choose the checks to perform, and press Start!

Toby Sanderson - Major Project, Visual Effects and Motion Graphics, Brunel University London, 2019

"""

import maya.cmds as cmds

#-----------------------------#
# ADD METADATA

def addFilePathMetaData():
    import pymel
    
    # create the metadata to add
    nodeName = "defaultArnoldDriver.customAttributes"
    filePath = cmds.file(query = True, sceneName = True)
    mayaFile = {"name":"mayaFile", "type":"STRING", "value": filePath}
    
    # if there isn't already this attribute
    def addAttribute(nodeName, value):
        nextIndex = 0
        if cmds.getAttr(nodeName, multiIndices= True):
            nextIndex = cmds.getAttr(nodeName, multiIndices= True)[-1] + 1
        cmds.setAttr(nodeName+'['+str(nextIndex)+']', "%s %s %s" % (value["type"],value["name"],value["value"]), type="string")
    
    # if the attribute already exists
    def changeAttribute(nodename, value):
        for nodeNameIndex,i in enumerate(pymel.core.getAttr(nodeName)):
            j= i.split(" ")
            if len(j)>1:
                if j[1] == 'mayaFile':
                    cmds.setAttr(nodeName + '[' + str(nodeNameIndex) + ']', "%s %s %s" % (value["type"],value["name"],value["value"]), type="string")
                    break
        
    attributes=[]
    for attr in pymel.core.getAttr(nodeName):
        niceAttr = attr.split(" ")
        if len(niceAttr)>1:
            attributes.append(niceAttr[1])
        
    if "mayaFile" in attributes:
        try:
            changeAttribute(nodeName, mayaFile)
            print "The 'mayaFile' metadata item already existed and has been updated to the latest file path.\n"
            return 1
        except:
            print "There was an error updating the 'mayaFile' metadata item.\n"
            return "There was an error updating the metadata to include details of the Maya file."
                
    else:
        try:
            addAttribute(nodeName, mayaFile)
            print "The 'mayaFile' metadata item has been created and will be included your render.\n"
            return 1
        except:
            print "There was an error creating the 'mayaFile' metadata item.\n"
            return "There was an error creating the metadata item to include details of the Maya file."

    
#-----------------------------#
# HIDE ASSISTANTS

def hideAssistants():   
    assistants = cmds.ls("::Assistants", r=True) # Objects to be hidden must be called "Assistants" (case sensitive)
    try:
        if assistants:
            cmds.select(assistants)
            cmds.hide(assistants)
            print "The render assistants have been hidden and won't appear in your renders.\n",
            return 1
        else:
            print "No render assistants could be found in your scene, so nothing has been hidden.\n",
            return "No render assistants could be found in your scene, so nothing has been hidden."
    except:
        print "The render assistants couldn't be hidden due to an error.\n",
        return "The render assistants couldn't be hidden due to an error."

#-----------------------------#
# RENDER CAMERA CHECK

def checkRenderCamera():
    renderableList=[]
    for x in cmds.ls(typ='camera',l=True):
        if cmds.getAttr(x+'.renderable'):
            renderableList.append(x)
    ll=len(renderableList)
    if ll==0:
        print "You haven't set any camera to be renderable. Head to the Render Settings and choose which camera you'd like.\n",
        return "You haven't set any camera to be renderable. Head to the Render Settings and choose which camera you'd like."
    if ll>1:
        print "There is more than one camera selected to render! If this is unexpected, cancel the render and try again.\n",
        return "There is more than one camera selected to render! If this is unexpected, cancel the render and try again."
    else: # if ll==1
        camSelect = []
        camSelect = renderableList[0].split("|")
        defaultCamList = ["persp", "top", "front", "side", "back", "right", "left", "bottom"]
        
        for cam in defaultCamList:
            if cam == camSelect[1]: # one of the default cameras
                print "The '%s' camera is selected to render. Double check this is correct before proceeding!" % cam,
                return "It looks like you've got one of the default cameras selected to render, double check if this isn't what you expected."
        print "Looks good, your selected render camera is:", camSelect[1], "\n",
        return 1

#-----------------------------#
# ESSENTIAL SETTINGS

def essentialSettings():
    try:
        cmds.setAttr("defaultArnoldDriver.autocrop", 1)
        cmds.setAttr("defaultArnoldRenderOptions.abortOnLicenseFail", 1)
        cmds.setAttr("defaultRenderGlobals.currentRenderer", "arnold", type="string")
        cmds.setAttr("defaultRenderGlobals.outFormatControl", 0)
        cmds.setAttr("defaultRenderGlobals.animation", 1)
        cmds.setAttr("defaultRenderGlobals.putFrameBeforeExt", 1)
        cmds.setAttr("defaultRenderGlobals.extensionPadding", 4)
        cmds.setAttr("defaultRenderGlobals.periodInExt", 1)
        return 1
    except:
        print "There was an error implementing the Essential Render Settings.",
        return "There was an error implementing the Essential Render Settings."

#-----------------------------#
# FILE AND TEXTURE CHECK

def fileCheck():
    import os

    texDirs = []
    fileError = []
    fileList = cmds.ls(type = "file")
    
    if len(fileList) == 0:
        print "It doesn't look like there are any files or textures linked to your scene!",
        return "It doesn't look like there are any files or textures linked to your scene!"
    else:
        print "Details of the files linked to this scene:\n",
        for f in fileList:
            fPath = cmds.getAttr(f + ".fileTextureName")
            dirPath = os.path.split(fPath)[0]   
            print "- " + fPath
            
            if not os.path.exists(fPath):
                fileError.append(fPath)
                
    if len(fileError) != 0: # If some file paths have errors
        print "\nSome of your files have errors!"
        for n in fileError:
            print "- " + n
        return "Some of the files linked to this scene don't exist or have been moved. Check the script editor for more details!"
    
    else: # All the file paths are correct
        print "All the files in your scene seem to be properly linked!",
        return 1

#-----------------------------#
# HQ SETTINGS

def setHQ():
    try:
        #Turn on Disp + Subviv, blur
        cmds.setAttr('defaultArnoldRenderOptions.maxSubdivisions', 3)
        cmds.setAttr('defaultArnoldRenderOptions.ignoreSubdivision', 0)
        cmds.setAttr('defaultArnoldRenderOptions.ignoreDisplacement', 0)        
        cmds.setAttr('defaultArnoldRenderOptions.motion_blur_enable', 1)
        cmds.setAttr('defaultArnoldRenderOptions.ignoreBump', 0)
        
        #Arnold AA settings
        cmds.setAttr('defaultArnoldRenderOptions.AASamples', 8)
        cmds.setAttr('defaultArnoldRenderOptions.GIDiffuseSamples', 4)
        cmds.setAttr('defaultArnoldRenderOptions.GIGlossySamples', 4)
        cmds.setAttr('defaultArnoldRenderOptions.GIRefractionSamples', 4)
        cmds.setAttr('defaultArnoldRenderOptions.GISssSamples', 4)    
        cmds.setAttr('defaultArnoldRenderOptions.GIVolumeSamples', 0)    
        cmds.setAttr('defaultArnoldRenderOptions.GIGlossyDepth', 1)
        cmds.setAttr('defaultArnoldRenderOptions.GIRefractionDepth', 4)        

        #Low light threshold
        cmds.setAttr('defaultArnoldRenderOptions.lowLightThreshold', 0.015)
        print "PRC-HQRender: Your scene has been set up for a HQ Render!\n",
        return 1
    except:
        print "There was an error implementing the HQ Render Settings.",
        return "There was an error implementing the HQ Render Settings."

#-----------------------------#
# LQ SETTINGS

def setLQ():
    try:
        #Turn on Disp + Subviv, blur
        cmds.setAttr('defaultArnoldRenderOptions.maxSubdivisions', 1)
        cmds.setAttr('defaultArnoldRenderOptions.motion_blur_enable', 1)
        cmds.setAttr('defaultArnoldRenderOptions.ignoreBump', 0)
        
        #Arnold AA settings
        cmds.setAttr('defaultArnoldRenderOptions.AASamples', 2)
        cmds.setAttr('defaultArnoldRenderOptions.GIDiffuseSamples', 1)
        cmds.setAttr('defaultArnoldRenderOptions.GIGlossySamples', 1)
        cmds.setAttr('defaultArnoldRenderOptions.GIRefractionSamples', 1)
        cmds.setAttr('defaultArnoldRenderOptions.GISssSamples', 1)    
        cmds.setAttr('defaultArnoldRenderOptions.GIVolumeSamples', 0)    
        cmds.setAttr('defaultArnoldRenderOptions.GIGlossyDepth', 1)
        cmds.setAttr('defaultArnoldRenderOptions.GIRefractionDepth', 4)        

        #Low light threshold
        cmds.setAttr('defaultArnoldRenderOptions.lowLightThreshold', 0.015)
        print "PRC-LQRender: Your scene has been set up for a LQ Render\n",
        return 1
    except:
        print "There was an error implementing the LQ Render Settings.",
        return "There was an error implementing the LQ Render Settings."

#-----------------------------#
# ALL CHECKS PASSED

def checksPassed():
    cmds.deleteUI(PRCWindow, window=True)
    print "All the checks came back without any issues! Sending your scene to the farm now...",
    try:
        maya.mel.eval('SubmitJobToDeadline')
        print "Your scene has been sent to the render farm - thanks for using PreRenderChecks!",
    except:
        maya.OpenMaya.MGlobal.displayWarning("There was an error sending your scene to the render farm!")

#-----------------------------#
# SUBMIT TO FARM AFTER SKIP

def submitToFarmAfterSkip(*args):
    cmds.deleteUI(PRCWindow, window=True)
    print "No changes made to your scene. Submitting to the render farm now...\n",
    try:
        maya.mel.eval('SubmitJobToDeadline')
        print "Your scene has been sent to the render farm - thanks for using PreRenderChecks!",
    except:
        maya.OpenMaya.MGlobal.displayWarning("There was an error sending your scene to the render farm!")

#-----------------------------#
# SUBMIT TO FARM AFTER FAIL

def submitToFarmAfterFail(*args):
    cmds.deleteUI(FailInfo, window=True)
    print "You got it - submitting to the render farm now...\n",
    try:
        maya.mel.eval('SubmitJobToDeadline')
        print "Your scene has been sent to the render farm - thanks for using PreRenderChecks!",
    except:
        maya.OpenMaya.MGlobal.displayWarning("There was an error sending your scene to the render farm!")

#-----------------------------#
# CLOSE MAIN PRC WINDOW

def closeMainWindow(*args):
    cmds.deleteUI(PRCWindow, window=True)
    print "\nPRC: Cancelled - no changes were made to your scene.",
    
#-----------------------------#
# CLOSE AFTER FAIL

def closeAfterFail(*args):
    toClose = "FailInfo"
    cmds.deleteUI(FailInfo, window=True)
    print "\nPRC: Cancelled - see script editor for details of any changes made to your scene.",

#-----------------------------#
# GET SELECTED ACTIONS

def getSelectedActions(*args):    
    global checkFails
    checkFails = []
    if cmds.checkBox(PRCMetadata, q=1, v=1) == True:
        metaDataResult = addFilePathMetaData()
        if metaDataResult != 1:
            checkFails.append(metaDataResult)
    if cmds.checkBox(PRCHideAssistants, q=1, v=1) == True:
        hideAssistantsResult = hideAssistants()
        if hideAssistantsResult != 1:
            checkFails.append(hideAssistantsResult)
    if cmds.checkBox(PRCRenderCamera, q=1, v=1) == True:
        checkRenderCameraResult = checkRenderCamera()
        if checkRenderCameraResult != 1:
            checkFails.append(checkRenderCameraResult)
    if cmds.checkBox(PRCEssentialSettings, q=1, v=1) == True:
        essentialSettingsResult = essentialSettings()
        if essentialSettingsResult != 1:
            checkFails.append(essentialSettingsResult)
    if cmds.checkBox(PRCTextureCheck, q=1, v=1) == True:
        fileCheckResult = fileCheck()
        if fileCheckResult != 1:
            checkFails.append(fileCheckResult)
    if cmds.checkBox(enableHQLQ, q=1, v=1) == True:
        if cmds.radioButtonGrp(HQLQOption, q=1, sl=1) == 1:
            setLQResult = setLQ()
            if setLQResult != 1:
                checkFails.append(setLQResult)
        elif cmds.radioButtonGrp(HQLQOption, q=1, sl=1) == 2:
            setHQResult = setHQ()
            if setHQResult != 1:
                checkFails.append(setHQResult)
        else: # Nothing is selected
            print "ERROR: Ensure either HQ or LQ is selected!"
            cmds.confirmDialog(m="Ensure that you pick either HQ or LQ!", t="PRC", b="Silly Me")

    if len(checkFails)>= 1:
        errorHandling()
        
    else: # if all checks return successful
        checksPassed()
        
#-----------------------------#
# ERROR HANDLING

def errorHandling():      
    errorText = str(checkFails)
    global FailInfo
    FailInfo = cmds.window(mxb= False, mnb=False, rtf=True, title="Pre-Render Checks")
    cmds.columnLayout(cw=400)
    cmds.text(l="\nPre-Render Checks returned the following points\nfor your attention. Review them and decide if\nyou want to cancel or go ahead with the render.\n")
    
    errorField = cmds.scrollField(h=130, w=300, ed=False, ww=True)
    errorLength = len(checkFails)
    errorCounter = 0
    while errorCounter < errorLength: # prints each error nicely
        toAdd = checkFails[errorCounter] + "\n\n"
        cmds.scrollField(errorField, edit=True, ip=0, it=toAdd)
        errorCounter = errorCounter + 1
    
    cmds.rowColumnLayout(numberOfColumns = 2, columnWidth = [(1,90),(2,90)], cs=[(1,0),(2,10)])
    FailCancel = cmds.button(label="Cancel", w=80, command=closeAfterFail)
    FailContinue = cmds.button(label="Submit to Farm", w=80, command=submitToFarmAfterFail)
    
    cmds.deleteUI(PRCWindow, window=True)
    
    cmds.showWindow(FailInfo)
    
    print "A number of points were returned for your attention. Take a look and decide whether to cancel or continue.",

#-----------------------------#
# RUN PRC WINDOW

print "\n\n\n Pre-Render Checks now running!"

def HQLQtoggle():
    if cmds.checkBox(enableHQLQ, q=True, v=True) == True:        # If ticked
        cmds.radioButtonGrp(HQLQOption, edit=True, enable=True)  # Enable
    else:                                                        # If un-ticked
        cmds.radioButtonGrp(HQLQOption, edit=True, enable=False) # Disable

PRCWindow = cmds.window(mxb= False, mnb=False, rtf=True, title="Pre-Render Checks")

cmds.columnLayout(cw=400)
cmds.text(l="\nSelect the checks you'd like to perform before\nsubmitting this 	scene to the Render Farm:\n")

cmds.rowColumnLayout(numberOfColumns = 1, columnWidth=[(1, 300)], rowSpacing=[(1,10)])
PRCMetadata = cmds.checkBox(label="Add Maya Filepath Metadata", v=1)
PRCHideAssistants = cmds.checkBox(label="Hide Render Assistants", v=1)
PRCRenderCamera = cmds.checkBox(label="Ensure Render Camera Selected", v=1)
PRCEssentialSettings = cmds.checkBox(label="Enable Essential Render Settings", v=1)
PRCTextureCheck = cmds.checkBox(label="Missing Texture and File Check", v=1)
enableHQLQ = cmds.checkBox(label="Enable Recommended HQ/LQ Settings...", onCommand= "HQLQtoggle()", offCommand= "HQLQtoggle()")

cmds.columnLayout(cw=100)
HQLQOption = cmds.radioButtonGrp(nrb=2, label1="LQ", label2="HQ", enable=False)

cmds.rowColumnLayout(numberOfColumns = 3, columnWidth = [(1,90),(2,90),(3,90)], cs=[(1,0),(2,10),(3,10)])
PRCCancel = cmds.button(label="Cancel", w=80, command=closeMainWindow)
PRCSkip = cmds.button(label="Skip", w=80, command=submitToFarmAfterSkip)
PRCSubmit = cmds.button(label="Submit >>", w=80, command=getSelectedActions)

cmds.showWindow(PRCWindow)

print "Choose the pre-render checks you'd like to perform before sending your scene to the farm!",
